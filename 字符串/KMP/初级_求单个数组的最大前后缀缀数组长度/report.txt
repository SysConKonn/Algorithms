模式串t  A B A B A A
下标     0 1 2 3 4 5
next    0 0 1 2 3 1

next[0]代表t[0]~t[0]即"A"的最大前后缀，显然为0.
next[1]代表t[0]~t[1]即"AB"的最大前后缀，为0.
next[2]代表t[0]~t[2]即"ABA"的最大前后缀，即"A",长度为1.
next[3]代表t[0]~t[3]即"ABAB"的最大前后缀，即"AB",长度为2. 
next[4]代表t[0]~t[4]即"ABABA"的最大前后缀，即"ABA",长度为3.
next[5]代表t[0]~t[5]即"ABABAA"的最大前后缀，即"A",长度为1.

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10

看到这里，next值代表的意义应该可以明白了。
但next数组怎样用代码去求呢，我们当然不可能挨个去比较前后缀。
仍然是上面那个例子
A B A B A A
初始化，next[0]为0；
t[0] != t[1] next[1]为0；
t[0] == t[2] next[2]为1；
在求next[3]时，比较t[1]和t[3]是否相等？
相等：显然 next[3] = next[2]+1;
不相等：怎么办？ 看下面

void makeNext(char s[],int next[])
{
    int len = strlen(s);
    next[0]=0;                    //初始化
    for(int i=1,k=0;i<len;i++)
    {
        while(k>0 && s[k]!=s[i])  //这个while是最关键的部分
            k=next[k-1]; 
            //等价于  k=next[next[i-1]-1]
            //等号右边的k起的只是下标的作用
        if(s[k]==s[i])            
            k++;                  //相等就+1
        next[i]=k;                //赋值
    }
}

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
    12
    13
    14
    15

例子说话
A B A B A B A C
0 1 2 3 4 5 6 7
next[6] = 5
即前缀为t[0]~t[4] 后缀为t[2]~t[6]
next[4] = 3
即前缀为t[0]~t[2] 后缀为t[2]~t[4]
我们发现
next[4]的前缀一定是next[6]的前缀
next[4]的后缀也一定是next[6]的后缀
(这是while循环的原理，可以试着举个例子验证一下)

    现在我们要求next[7]，将t[7]与t[5] ( t[next[6]] )比较，发现不相等
    那么可以将t[7]与t[3] (t[ next[next[6]-1] ])比较，如果相等，则next[7] = next[4] +1 ;
    不相等就重复此过程，直到t[7]与t[0]比较.

上框内过程其实就是代码中，while循环里的内容，现在回过头去看上面代码应该会顺畅很多。
来自CSDN博客:http://blog.csdn.net/to_be_better/article/details/49086075
